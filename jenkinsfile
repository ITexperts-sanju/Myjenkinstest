pipeline {
    agent any

    environment {
        IMAGE_NAME = "flask-app"
        CONTAINER_NAME = "flask-current"
        ARTIFACT_DIR = "artifacts"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/ITexperts-sanju/Myjenkinstest.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    env.BUILD_TAG = new Date().format("yyyyMMddHHmmss")
                    sh "docker build -t ${IMAGE_NAME}:${BUILD_TAG} ."
                }
            }
        }

        stage('Save Artifact') {
            steps {
                script {
                    sh "mkdir -p ${ARTIFACT_DIR}"
                    sh "docker save ${IMAGE_NAME}:${BUILD_TAG} -o ${ARTIFACT_DIR}/${IMAGE_NAME}-${BUILD_TAG}.tar"
                }
            }
        }

        stage('Archive Artifact to Jenkins') {
            steps {
                archiveArtifacts artifacts: "${ARTIFACT_DIR}/*.tar", fingerprint: true
            }
        }

        stage('Deploy New Version') {
            steps {
                script {
                    sh "docker rm -f new_${CONTAINER_NAME} || true"
                    sh "docker run -d -p 5001:5000 --name new_${CONTAINER_NAME} ${IMAGE_NAME}:${BUILD_TAG}"
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    sleep 5
                    sh "curl -f http://localhost:5001/health || exit 1"
                }
            }
        }

        stage('Rollover') {
            steps {
                script {
                    sh "docker rm -f ${CONTAINER_NAME} || true"
                    sh "docker rename new_${CONTAINER_NAME} ${CONTAINER_NAME}"
                }
            }
        }
    }

    post {
        failure {
            script {
                echo "❌ New build failed. Rolling back from last artifact..."
                sh "docker rm -f ${CONTAINER_NAME} || true"

                sh '''
                LATEST_TAR=$(ls -t artifacts/${IMAGE_NAME}-*.tar | head -n 1)
                docker load -i $LATEST_TAR
                IMAGE_TAG=$(basename $LATEST_TAR .tar | cut -d'-' -f2)
                docker run -d -p 5000:5000 --name ${CONTAINER_NAME} ${IMAGE_NAME}:$IMAGE_TAG
                '''
            }
        }
        success {
            echo "✅ New version deployed successfully!"
        }
    }
}
